import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(title: 'Flutter', initialRoute: '/splashPage', routes: {
      '/splashPage': (_) => SplashPage(),
      '/loginPage': (_) => LoginPage(),
    });
  }
}

class SplashPage extends StatefulWidget {
  const SplashPage({Key? key}) : super(key: key);

  @override
  _SplashPageState createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> {
  @override
  void initState() {
    super.initState();
    Future.delayed(Duration(seconds: 5)).then(
      (_) => Navigator.of(context).pushReplacementNamed('/loginPage'),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.green,
      child: Center(
        child: CircularProgressIndicator(color: Colors.white),
      ),
    );
  }
}

class LoginPage extends StatefulWidget {
  LoginPage({Key? key}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  LoginController _controller = LoginController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Container(
          width: 200,
          height: 300,
          child: Column(
            children: [
              Icon(Icons.people, size: 80),
              TextField(
                decoration: InputDecoration(
                  label: Text('Username or Email'),
                ),
                onChanged: _controller.setLogin,
              ),
              SizedBox(height: 2),
              TextField(
                decoration: InputDecoration(
                  label: Text('Password'),
                ),
                obscureText: true,
                onChanged: _controller.setPassword,
              ),
              SizedBox(height: 15),
              ValueListenableBuilder<bool>(
                  valueListenable: _controller.inLoader,
                  builder: (context, value, child) => value
                      ? CircularProgressIndicator()
                      : ElevatedButton(
                          onPressed: () {
                            _controller.auth().then((result) {
                              if (result) {
                                Navigator.of(context)
                                    .pushReplacementNamed('/splashPage');
                              } else {
                                print('ACESSO NEGADO');
                              }
                            });
                          },
                          child: Text('Login'),
                        )),
            ],
          ),
        ),
      ),
    );
  }
}

class LoginController {
  ValueNotifier<bool> inLoader = ValueNotifier<bool>(false);

  String _login = '';
  setLogin(String login) => _login = login;

  String _password = '';
  setPassword(String password) => _password = password;

  Future<bool> auth() async {
    inLoader.value = true;
    await Future.delayed(Duration(seconds: 5));
    print('Username/Email: $_login | Password: $_password');
    inLoader.value = false;
    return (_login == 'johnny' && _password == 'didifeiosa');
  }
}
