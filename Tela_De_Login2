import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(title: 'Flutter', initialRoute: '/splashPage', routes: {
      '/splashPage': (_) => SplashPage(),
      '/loginPage': (_) => LoginPage(),
    });
  }
}

class SplashPage extends StatefulWidget {
  const SplashPage({Key? key}) : super(key: key);

  @override
  _SplashPageState createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> {
  @override
  void initState() {
    super.initState();
    Future.delayed(Duration(seconds: 5)).then(
      (_) => Navigator.of(context).pushReplacementNamed('/loginPage'),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.green,
      child: Center(
        child: CircularProgressIndicator(color: Colors.white),
      ),
    );
  }
}

class LoginPage extends StatefulWidget {
  LoginPage({Key? key}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  LoginController _controller = LoginController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Container(
          width: 200,
          height: 300,
          child: Column(
            children: [
              Icon(Icons.people, size: 80),
              CustomTextField(
                  label: 'Username', onChanged: _controller.setLogin),
              SizedBox(height: 2),
              CustomTextField(
                  label: 'Password',
                  onChanged: _controller.setPassword,
                  obscureText: true),
              SizedBox(height: 15),
              CustomLoginComponent(loginController: _controller),
            ],
          ),
        ),
      ),
    );
  }
}

class LoginController {
  ValueNotifier<bool> inLoader = ValueNotifier<bool>(false);

  String _login = '';
  setLogin(String login) => _login = login;

  String _password = '';
  setPassword(String password) => _password = password;

  Future<bool> auth() async {
    inLoader.value = true;
    await Future.delayed(Duration(seconds: 5));
    print('Username/Email: $_login | Password: $_password');
    inLoader.value = false;
    return (_login == 'johnny' && _password == '1234');
  }
}

class CustomLoginComponent extends StatelessWidget {
  final LoginController loginController;
  CustomLoginComponent({Key? key, required this.loginController})
      : super(key: key);
  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<bool>(
        valueListenable: loginController.inLoader,
        builder: (context, value, child) => value
            ? CircularProgressIndicator()
            : ElevatedButton(
                onPressed: () {
                  loginController.auth().then((result) {
                    if (result) {
                      Navigator.of(context).pushReplacementNamed('/splashPage');
                    } else {
                      print('ACESSO NEGADO');
                    }
                  });
                },
                child: Text('Login'),
              ));
  }
}

class CustomTextField extends StatelessWidget {
  final String label;
  final Function(String) onChanged;
  final bool obscureText;
  CustomTextField(
      {Key? key,
      required this.label,
      required this.onChanged,
      this.obscureText = false})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return TextField(
      decoration: InputDecoration(
        label: Text(label),
      ),
      obscureText: obscureText,
      onChanged: onChanged,
    );
  }
}
